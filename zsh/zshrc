# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

eval "$(direnv hook zsh)"

export HISTCONTROL=ignorespace
export EDITOR="/usr/bin/vim"
export VISUAL=$EDITOR
export WORKON_HOME=$HOME/virtualenvs
export PROJECT_HOME=$HOME/dev
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export BAT_STYLE="plain"
export BAT_THEME="Solarized (dark)"

eval "$(pyenv init -)"
pyenv virtualenvwrapper_lazy

#VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
#VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
#source /usr/local/bin/virtualenvwrapper.sh

# source stuff not stored in git.
for file in $HOME/.zsh/extras/*.zsh; do
    source $file
done

# https://github.com/lukechilds/zsh-nvm
source ~/.zsh-nvm/zsh-nvm.plugin.zsh

bindkey -v
bindkey '^R' history-incremental-search-backward
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line

# override alias from fasd prezto module
alias j='fasd_cd'

alias gcob="git checkout -b"
alias gco='git checkout $(git branch | fzf)'
alias gprm='git pull --rebase origin master'
alias gmt='go mod tidy'
alias gcleanmerged='git branch --merged master | egrep -v "master|main" | xargs -n 1 git branch -D'
alias rd="rm -rf"
alias tpl="terraform plan | landscape"
alias pfind='ps -aef | grep -i'
alias vf='nvim $(fzf --exact)'
alias vdiff="vimdiff -c 'set diffopt+=iwhite'"
alias venv='workon $(workon | fzf)'
alias cat="bat"
alias vi="${HOME}/.local/bin/lvim"

alias k='kubectl'
alias kcon='kubectx'
alias kns='kubens'
alias kpodsall='kubectl get pods --all-namespaces -o wide'
alias kpodrequests='kubectl get pods -o "custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.status.hostIP,REQUESTS-MEM:.spec.containers[*].resources.requests.memory,REQUESTS-CPU:.spec.containers[*].resources.requests.cpu"'
alias kimg='kubectl get pods -o "custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.status.hostIP,IMAGE:.spec.containers[*].image"'
alias krestart='kubectl patch -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"${KRESTART_ANNOTATION:-krestart}\":\"`date +'%s'`\"}}}}}"'
alias kevicted='kubectl get pods --all-namespaces -ojson | jq -r ".items[] | select(.status.reason!=null) | select(.status.reason | contains(\"Evicted\")) | .metadata.name + \" \" + .metadata.namespace"'
alias kconfigmaps='get deploy -o "custom-columns=NAME:.metadata.name,CONFIGMAP:.spec.template.spec.containers[*].envFrom[*].configMapRef.name"'

alias dstopall='docker stop $(docker ps -q)'

alias -g J="| jq ."
alias -g G="| grep --color=auto -Ei"
alias -g L="| less -R"
alias -g SL="| sort | less"
alias -g NOC="| sed -r 's,\x1B\[[0-9;]*[a-zA-Z],,g' | tr -d '\r'"
alias -g Y="-o yaml | less -R"
alias -g decodeopenssl="base64 -d | openssl x509 -text -noout"

# delete a local and remote git branch
function rmbranch() {
    if ! $(git branch -a --list | grep -q "$1"); then
        echo "Branch $1 does not exist"
        return
    fi
    if ! $(git branch --merged | grep -q "$1"); then
        echo "$1 has not been merged to master yet"
        read -r -p "Are you sure you want to delete it? [y/N] " response
        if [[ ! "${response,,}" =~ ^(yes|y)$ ]]; then
            return
        fi
    fi
    git branch -D $1 && git push origin :$1
}

# ssh known_hosts deletion helper
function sdk() {
    if echo $1 | grep -qE '^[0-9]+$|^[0-9]+,[0-9]+$' ; then
        sed -i "${1}d" ${HOME}/.ssh/known_hosts
    fi
}

# print the process using a port (for MacOS)
function psport() {
    for i in $(lsof -Pnl +M -i4 | grep ":${1}.*LISTEN" | awk '{ print $2 }'); do ps -fp $i; done
}

function pmem() {
  local pid="$(pgrep -n -f $1)"
  ps -o pid,rss,command -p ${pid} | awk '{if(NR>1)printf "%d\t%.2f MB\t%s\n", $1, $2/1024, $3}'
}

# git grep the entire repo, not just the current directory
function ggrep() {
    git grep $1 -- :/
}

# creates an annotated tag
function gtag() {
    local version=$1
    local message=${2:-Version $1}
    git tag -a ${version} -m ${message}
}

# print resource usage for each k8s node. This will take a while if there are a lot of nodes
function kresources() {
    local node_type=${1:-.}
	local node_count=0
	local total_percent_cpu=0
	local total_percent_mem=0
    local output=""
	for n in $(kubectl get nodes --no-headers | grep ${node_type} | awk '{print $1}'); do
        local describe=$(kubectl describe node $n)
		local roles=$(echo ${describe} | grep -i "Roles:" | awk '{print $2}')
		local pods=$(echo ${describe} | grep -i "non-terminated pods" | awk '{print $3}' | sed 's/(//g')
        local requests=$(echo ${describe}  | grep -iA6 "allocated resources")
		local cpu_percent=$(echo ${requests} | grep cpu | awk -F "[()%]" '{print $2}')
		local cpu_count=$(echo ${requests} | grep cpu | awk '{print $2}')
		local mem_percent=$(echo ${requests} | grep memory | awk -F "[()%]" '{print $2}')
		local mem_count=$(echo ${requests} | grep memory | awk '{print $2}')
		output="${output}$(printf "\n%-50s %-15s %-5s %-20s %s" \
            "$n" "${roles}" "${pods}" "${cpu_count} ${cpu_percent}% cpu" "${mem_count} ${mem_percent}% mem")"

        node_count=$((node_count + 1))
		total_percent_cpu=$((total_percent_cpu + cpu_percent))
		total_percent_mem=$((total_percent_mem + mem_percent))
	done

    local avg_percent_cpu=$((total_percent_cpu / node_count))
	local avg_percent_mem=$((total_percent_mem / node_count))

    echo $output | sort -nrk3 | egrep -v '^$'
    echo
    echo "Average usage: ${avg_percent_cpu}% cpu, ${avg_percent_mem}% memory."
}

ksecret() {
    kubectl get secrets $1 -o json | jq ".data[\"$2\"]" -r | base64 -d
}

kpods() {
  kubectl get pods -o wide -l app="${1}"
}

aws-instances() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} ec2 describe-instances --filters "Name=tag:Name,Values=*${name}*" "$@"
}

aws-instances-list() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws-instances ${profile} ${name} "$@" | jq -r '.Reservations[].Instances[] | "\(.Tags[]|select(.Key == "Name")|.Value) \(.PrivateIpAddress) \(.InstanceId) \(.InstanceType) \(.Placement.AvailabilityZone) \(.SubnetId) \(.IamInstanceProfile.Arn | split("/") | .[1] ) \(.SecurityGroups)"' | column -t | sort
}

aws-launchconfig() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} autoscaling describe-launch-configurations --launch-configuration-names ${name} "$@"
}

aws-asg() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile}  autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${name} "$@"
}

aws-asgs() {
    local profile="${1}"
    shift 1
    aws --profile ${profile}  autoscaling describe-auto-scaling-groups
}

aws-asg-list() {
    local profile="${1}"
    shift 1
    aws-asgs ${profile} | jq -r '.AutoScalingGroups[] | "\(.AutoScalingGroupName) \(.DesiredCapacity)"' | column -t | sort 
}

aws-asg-history() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} autoscaling describe-scaling-activities --auto-scaling-group-name ${name} | jq .
}


aws-sg() {
    local profile="${1}"
    local sgid="${2}"
    shift 2
    aws --profile ${profile} ec2 describe-security-groups --group-ids ${sgid} | jq .
}

aws-role() {
    local profile="${1}"
    local role="${2}"
    shift 2
    aws --profile ${profile} iam get-role --role-name ${role} "$@" && \
    aws --profile ${profile} iam list-attached-role-policies --role-name ${role} "$@" && \
    aws --profile ${profile} iam get-instance-profile --instance-profile-name ${role} "$@"; \
    for policy in $(aws iam --profile ${profile} list-role-policies --role-name ${role} | jq '.PolicyNames[]' -r); do 
        echo "Inline Policy: ${policy}"
        aws iam --profile ${profile} get-role-policy --role-name ${role} --policy-name ${policy};
    done
}

aws-role-policy() {
    local profile="${1}"
    local role="${2}"
    local policy="${3}"
    shift 3
    aws --profile ${profile} iam get-role-policy --role-name ${role} --policy-name ${policy} "$@"
}


aws-role-delete() {
    local profile="${1}"
    local role="${2}"
    shift 2
    aws --profile ${profile} iam delete-role --role-name ${role} "$@" && \
}

aws-elb() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} elb describe-load-balancers --load-balancer-names ${name} "$@" || aws --profile ${profile} elbv2 describe-load-balancers --names ${name} "$@" 
}

aws-rds() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} rds describe-db-instances --db-instance-identifier ${name}
}

aws-kms() {
    local profile="${1}"
    local name="${2}"
    shift 2
    aws --profile ${profile} kms describe-key --key-id ${name}
}

encryptfile() {
    openssl enc -e -aes-256-cbc -a -salt -in $1 -out ${1}.enc
}

decryptfile() {
    openssl enc -d -aes-256-cbc -a -salt -in $1
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

